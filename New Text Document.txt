https://www.youtube.com/watch?v=3qBXWUpoPHo&t=9663s
7:51:09

Angular language services extension(Intellisense)
ng new 'name of web app' --createApplication = false (empty workspace)
ng g app 'name of app' (empty workspace)
ng new 'name of web app' (recommended)
--no-standalone (to generate ngModules)

1. Install Node.js
2. check version (ng version)
3. Open in Integrated Terminal where your package.json
4. run npm install/ npm i (install json package)

ng serve o- = open web

HOW TO CREATE NEW COMPONENT
    -ng generate component 'name of the component'(shortcut : ng g c 'name')

GitHub Co-Pilot = Intellisense

Angular
'constructor' =  are used to initialize the properties and dependencies of a class or component when an instance of that class or component is created
[] = Box syntax
() = Banana syntax
'{{}}' : interpolation syntax = to embed expressions or variables within your HTML templates(parang razor sa MVC)
'ngIf' = is a structural directive that is used to conditionally render or remove elements from the DOM
'ngOnInit' = his hook is commonly used to fetch data from a server, set up subscriptions, or perform other initialization tasks when a component is created
'changeDetection' = Use only when component have input and output
'...'(spread operator) = Use to cloning Array or Object or Merging 2 separate Array or Object. When you want to modify and array/object without affecting the original.
'ngOnchanges' = You can only use this on component or directive which have a input property in it.
'@' : Decorator = @ symbol followed by the decorator function's name
'ngAfterViewInit' =  lifecycle hook that comes after the view is fully initialized.
'ngAfterViewChecked' = its called after the view has been checked
'#' : template reference = a symbol followed by a name (ex. #myInput). In component class, you can access the template reference by using the @ViewChild or @ViewChildren decorator or by using the ViewChild and ViewChildren methods(ex. @ViewChild('user',{read:ViewContainerRef}) vcr!: ViewContainerRef;)
'@ViewChildren' = used to query for one or more child elements or components within the template of a parent component.
'ngAfterContentInit' = It is often used with Angular's <ng-content> directive, and it's a way to create reusable and flexible components that can accept different content from their parent components.
'ngOnDestroy' =  used to perform cleanup tasks, unsubscribe from observables, release resources, or perform any necessary cleanup operations to avoid memory leaks and ensure that resources are properly released when a component is no longer needed.
'Dependency Injection'-------------------
'Service' (ng g(generate) s(service) name(name of folder/service)) 
          = used to store and share data between different parts of the application, such as components.
          - encapsulate the business logic and operations of the application. 
          - esponsible for making HTTP requests to external APIs, handling responses, and providing data to components.
'Singleton Service' = creates a single instance of that service when the application starts, and it maintains that single instance throughout the application's lifecycle.
'Resolution Modifiers' ------------------
==============Class based providers ===================
'@self()' = is a decorator that is used to specify that a dependency should be resolved from the component's own injector, and not from a parent injector.
'@SkipSelf' = to skip the local injector and look for a dependency in the parent injectors.
'@Optional' =  is used in conjunction with dependency injection to specify that a dependency is optional
'@Host' = is used in conjunction with dependency injection to specify that a dependency should be resolved from the host component's injector and not from a parent or ancestor injector
=======================================================
================Value providers========================
'@Inject' = Commonly used in APP_CONFIG
=======================================================
import {HttpClientModule} from '@angular/common/http'; = Need to import this to 'app.module.ts' and declare 'HttpClientModule' to imports
